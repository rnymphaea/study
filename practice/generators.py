from string import ascii_lowercase


gen = (x ** 2 for x in range(1, 10) if x % 2 == 0)

a = set(gen) # {16, 64, 4, 36}
v = set(gen) # set()

# Генераторы позволяют использовать больше памяти.
# Пример: lst = [x for x in range(10**29)] -> MemoryError. lst = (x for x in range(10**29)) -> нет ошибки.


# Задача 1
# Вводится целое положительное число a.
# Необходимо определить генератор, который бы возвращал модули чисел в диапазоне [-a; a],
# а затем еще один, который бы вычислял кубы чисел (возведение в степень 3), возвращаемых первым генератором.
# Вывести в одну строчку через пробел первые четыре значения.
# (Полагается, что генератор выдает, как минимум четыре значения).

a = 12
gen1 = (abs(x) for x in range(-a, a+1))
gen2 = (y ** 3 for y in gen1)
for _ in range(4):
    print(next(gen2), end=' ')
print()

# Задача 2
# Используя символы малых букв латинского алфавита (строка ascii_lowercase), запишите генератор,
# который бы возвращал все сочетания из двух букв латинского алфавита.
# Выведите первые 50 сочетаний на экран в строку через пробел.

eng_alp = ascii_lowercase
n = len(eng_alp)
comb = (eng_alp[x] + eng_alp[y] for x in range(n) for y in range(n))
for _ in range(50):
    print(next(comb), end=' ')
print()

# Задача 3
# Имеется список из названий городов:
# cities = ["Москва", "Ульяновск", "Самара", "Уфа", "Омск", "Тула"]
# Необходимо записать генератор, который бы используя этот список, выдавал 1 000 000 наименований городов по циклу.
# То есть, дойдя до конца списка, возвращался в начало и повторял перебор. И так, для выдачи миллиона названий.
# Вывести на экран первые 20 наименований городов с помощью генератора в одну строчку через пробел.

cities = ["Москва", "Ульяновск", "Самара", "Уфа", "Омск", "Тула"]

gen_cities = (cities[x % 6] for x in range(1_000_000))

for _ in range(20):
    print(next(gen_cities), end=' ')
print()


# Задача 4
# Имеется график функции f(x) = 0.5x^2 - 2.
# Необходимо записать генератор, который бы выдавал значения этой функции для аргумента x в диапазоне [a; b] с шагом 0.01.
# Величины a, b вводятся с клавиатуры в одну строчку через пробел как целые числа (a< b).
# Вывести на экран первые 20 значений функции с точностью до сотых, взятых из генератора.
# P.S. Значения функции вычислять командой: f(x) = 0.5 * pow(x, 2) - 2.0


def f(x):
    return 0.5 * pow(x, 2) - 2.0


a, b = 12, 26
gen = (round(f(x / 100), 2) for x in range(a*100, b*100))
for _ in range(20):
    print(next(gen), end=' ')
print()

# Функция-генератор yield

# Задача 1
# Вводится натуральное число N.
# Необходимо определить функцию-генератор с именем get_sum, которая бы возвращала текущую сумму чисел последовательности длины N в диапазоне целых чисел [1; N].
# Например:
# - для первого числа 1 сумма равна 1;
# - для второго числа 2 сумма равна 1+2 = 3
# ....
# - для N-го числа сумма равна 1+2+...+(N-1)+N
#
# Реализовать функцию-генератор get_sum без использования коллекций. Вызывать ее не нужно, только определить.


def get_sum(n):
    for i in range(1, n + 1):
        a = range(1, i + 1)
        yield sum(a)


# Задача 2
# Мы с вами в заданиях несколько раз генерировали последовательность чисел Фибоначчи,
# которая строится по правилу: каждое последующее число равно сумме двух предыдущих.
# Для разнообразия давайте будем генерировать каждое последующее как сумму трех предыдущих чисел.
# При этом первые три числа равны 1 и имеем такую последовательность:
# 1, 1, 1, 3, 5, 9, 17, 31, 57, ...
# Не знаю, есть ли у нее название, поэтому, в рамках уроков, я скромно назову ее последовательностью Балакирева.
# Итак, на вход программы поступает натуральное число N (N > 5) и необходимо определить функцию-генератор,
# которая бы возвращала N первых чисел последовательности Балакирева (включая первые три единицы).
# Реализуйте эту функцию без использования коллекций (списков, кортежей, словарей и т.п.).
# Вызовите ее N раз для получения N чисел и выведите полученные числа на экран в одну строчку через пробел.


def get_trib(n):
    a, b, c = 1, 1, 1
    for i in range(n):
        if n < 3:
            yield i
        else:
            yield a
            a, b, c = b, c, a + b + c


N = 7
seq = get_trib(N)
for _ in range(N):
    print(next(seq), end=' ')
print()