from string import ascii_lowercase


gen = (x ** 2 for x in range(1, 10) if x % 2 == 0)

a = set(gen) # {16, 64, 4, 36}
v = set(gen) # set()

# Генераторы позволяют использовать больше памяти.
# Пример: lst = [x for x in range(10**29)] -> MemoryError. lst = (x for x in range(10**29)) -> нет ошибки.


# Задача 1
# Вводится целое положительное число a.
# Необходимо определить генератор, который бы возвращал модули чисел в диапазоне [-a; a],
# а затем еще один, который бы вычислял кубы чисел (возведение в степень 3), возвращаемых первым генератором.
#Вывести в одну строчку через пробел первые четыре значения.
# (Полагается, что генератор выдает, как минимум четыре значения).

a = int(input('Задача 1'))
gen1 = (abs(x) for x in range(-a, a+1))
gen2 = (y ** 3 for y in gen1)
for _ in range(4):
    print(next(gen2), end=' ')


# Задача 2
# Используя символы малых букв латинского алфавита (строка ascii_lowercase), запишите генератор,
# который бы возвращал все сочетания из двух букв латинского алфавита.
# Выведите первые 50 сочетаний на экран в строку через пробел.

eng_alp = ascii_lowercase
n = len(eng_alp)
comb = (eng_alp[x] + eng_alp[y] for x in range(n) for y in range(n))
for _ in range(50):
    print(next(comb), end=' ')

